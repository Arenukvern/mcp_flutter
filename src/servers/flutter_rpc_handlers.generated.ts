import { FlutterInspectorServer } from "./flutter_inspector_server.js";

/**
 * Generated class containing handlers for Flutter RPC tools.
 *
 * This class is generated from server_tools_handler.yaml.
 * Do not edit this file directly.
 */
export class FlutterRpcHandlers {
  private server: FlutterInspectorServer;

  constructor(server: FlutterInspectorServer) {
    this.server = server;
  }

  /**
   * Fetches the widget tree.
   */
  async handleGetWidgetTree(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.dumpRenderTree", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Fetches details for a specific widget.
   */
  async handleGetWidgetDetails(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.getProperties", { arg: { objectId: params?.objectId } });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Toggles debug paint mode.
   */
  async handleToggleDebugPaint(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.setDebugPaint", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Gets the list of extension RPCs.
   */
  async handleGetExtensionRpcs(port: number, params?: any): Promise<unknown> {
    
    const result = await this.server.invokeFlutterExtension(port, "get_extension_rpcs", { isolateId: params?.isolateId, isRawResponse: params?.isRawResponse });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Dump the layer tree from the Flutter app.
   */
  async handleDebugDumpLayerTree(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.dumpLayerTree", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Dump the semantics tree in traversal order.
   */
  async handleDebugDumpSemanticsTree(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.dumpSemanticsTreeInTraversalOrder", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Dump the semantics tree in inverse hit test order.
   */
  async handleDebugDumpSemanticsTreeInverse(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.dumpSemanticsTreeInInverseHitTestOrder", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Toggle baseline paint debugging.
   */
  async handleDebugPaintBaselinesEnabled(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.debugPaintBaselinesEnabled", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Dump the focus tree.
   */
  async handleDebugDumpFocusTree(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.dumpFocusTree", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Toggle physical shape layers debugging.
   */
  async handleDebugDisablePhysicalShapeLayers(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.debugDisablePhysicalShapeLayers", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Toggle opacity layers debugging.
   */
  async handleDebugDisableOpacityLayers(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "debug.debugDisableOpacityLayers", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Take a screenshot of the Flutter app.
   */
  async handleInspectorScreenshot(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.screenshot", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get layout explorer information for a widget.
   */
  async handleInspectorGetLayoutExplorerNode(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.getLayoutExplorerNode", { objectId: params?.objectId });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Track widget rebuilds to identify performance issues.
   */
  async handleInspectorTrackRebuildDirtyWidgets(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.trackRebuildDirtyWidgets", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Set the selected widget by ID.
   */
  async handleInspectorSetSelectionById(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.setSelectionById", { selectionId: params?.selectionId });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get the parent chain for a widget.
   */
  async handleInspectorGetParentChain(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.getParentChain", { objectId: params?.objectId });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get the children summary tree for a widget.
   */
  async handleInspectorGetChildrenSummaryTree(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.getChildrenSummaryTree", { objectId: params?.objectId });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get the details subtree for a widget.
   */
  async handleInspectorGetDetailsSubtree(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.getDetailsSubtree", { objectId: params?.objectId });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get information about the currently selected widget.
   */
  async handleInspectorGetSelectedWidget(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.getSelectedWidget", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get summary information about the currently selected widget.
   */
  async handleInspectorGetSelectedSummaryWidget(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.getSelectedSummaryWidget", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Check if widget creation tracking is enabled.
   */
  async handleInspectorIsWidgetCreationTracked(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.isWidgetCreationTracked", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Enable or disable socket profiling.
   */
  async handleDartIoSocketProfilingEnabled(port: number, params?: any): Promise<unknown> {
    
    const result = await this.server.invokeFlutterExtension(port, "dart.io.socketProfilingEnabled", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Enable or disable HTTP timeline logging.
   */
  async handleDartIoHttpEnableTimelineLogging(port: number, params?: any): Promise<unknown> {
    
    const result = await this.server.invokeFlutterExtension(port, "dart.io.httpEnableTimelineLogging", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get Flutter version information.
   */
  async handleDartIoGetVersion(port: number, params?: any): Promise<unknown> {
    
    const result = await this.server.invokeFlutterExtension(port, "dart.io.getVersion", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Get list of currently open files in the Flutter app.
   */
  async handleDartIoGetOpenFiles(port: number, params?: any): Promise<unknown> {
    
    const result = await this.server.invokeFlutterExtension(port, "dart.io.getOpenFiles", {});
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Enable or disable structured error reporting.
   */
  async handleInspectorStructuredErrors(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.structuredErrors", { enabled: params?.enabled });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Show specific widget details in the Flutter app inspector.
   */
  async handleInspectorShow(port: number, params?: any): Promise<unknown> {
    await this.server.verifyFlutterDebugMode(port);
    const result = await this.server.invokeFlutterExtension(port, "inspector.show", { arg: params?.options });
    return this.server.wrapResponse(Promise.resolve(result));
  }
  
}
