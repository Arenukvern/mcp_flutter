import { RpcUtilities } from "./rpc_utilities.js";

/**
 * Generated class containing handlers for Flutter RPC tools.
 *
 * This class is generated from server_tools_handler.yaml.
 * Do not edit this file directly.
 */
export class FlutterRpcHandlers {
  private rpcUtils: RpcUtilities;

  constructor(rpcUtils: RpcUtilities) {
    this.rpcUtils = rpcUtils;
  }

  /**
   * Fetches the widget tree.
   */
  async handleDebugDumpRenderTree(port: number, params?: any): Promise<unknown> {
    await this.rpcUtils.verifyFlutterDebugMode(port);
    const result = await this.rpcUtils.invokeFlutterMethod(port, "debug.dumpRenderTree", {});
    return this.rpcUtils.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Fetches details for a specific widget.
   */
  async handleInspectorGetProperties(port: number, params?: any): Promise<unknown> {
    await this.rpcUtils.verifyFlutterDebugMode(port);
    const result = await this.rpcUtils.invokeFlutterMethod(port, "inspector.getProperties", { arg: { objectId: params?.objectId } });
    return this.rpcUtils.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Fetches VM information.
   */
  async handleGetVm(port: number, params?: any): Promise<unknown> {
    await this.rpcUtils.verifyFlutterDebugMode(port);
    const result = await this.rpcUtils.invokeFlutterMethod(port, "getVM", {});
    return this.rpcUtils.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Toggles debug paint mode.
   */
  async handleDebugSetDebugPaint(port: number, params?: any): Promise<unknown> {
    await this.rpcUtils.verifyFlutterDebugMode(port);
    const result = await this.rpcUtils.invokeFlutterMethod(port, "debug.setDebugPaint", { enabled: params?.enabled });
    return this.rpcUtils.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Fetches the root widget summary tree using the Dart Service Extension Proxy.
   */
  async handleInspectorGetRootWidgetSummaryTree(port: number, params?: any): Promise<unknown> {
    await this.rpcUtils.verifyFlutterDebugMode(port);
    const result = await this.rpcUtils.invokeFlutterMethod(port, "ext.flutter.inspector.getRootWidgetSummaryTree", { arg: { includeProperties: params?.includeProperties, subtreeDepth: params?.subtreeDepth } });
    return this.rpcUtils.wrapResponse(Promise.resolve(result));
  }
  
  /**
   * Dump the layer tree from the Flutter app.
   */
  async handleDebugDumpLayerTree(port: number, params?: any): Promise<unknown> {
    await this.rpcUtils.verifyFlutterDebugMode(port);
    const result = await this.rpcUtils.invokeFlutterMethod(port, "debug.dumpLayerTree", {});
    return this.rpcUtils.wrapResponse(Promise.resolve(result));
  }
  
}
